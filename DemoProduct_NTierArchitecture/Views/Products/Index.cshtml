@using Entites.Concretes
@model List<Product>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_UILayout.cshtml";
}

<h1></h1>

<table class="table table-bordered">

    <tr>

        <th>#</th>
        <th>Ürün Adı</th>
        <th>Fiyat</th>
        <th>Stok</th>
        <th></th>

    </tr>

    @foreach (var item in Model)
     {
        <tr>
            <td>@item.Id</td>
            <td>@item.Name</td>
            <td>@item.UnitPrice</td>
            <td>@item.StockAmount</td>
            <td>
                <a href="/Products/DeleteProduct/@item.Id" class="btn btn-outline-danger">Sil</a> 
                <a href="/Products/UpdateProduct/@item.Id" class="btn btn-outline-success">Güncelle</a>
            </td>
        </tr>
     }

</table>



@* ProductsController yerine Products yazınca da çalışıyor. !!!!!!!!!!!!!!!!! ===>>> yanlış bilgi
    
    
    
    **********Doğru Bilgi***********
    
    ** Controller'lar içerisinde view oluşturduğumuzda hepsi kendisi için view klasörü oluşturuyor. Index Sayfalarında sil ve güncelle işlemlerine ref. verirken de bu klasörleri kullanıyoruz. O da controller'a gidip ilgili işleme başvuruyor.



    
    *@